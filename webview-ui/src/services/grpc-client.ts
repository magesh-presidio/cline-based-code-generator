// GENERATED CODE -- DO NOT EDIT!
// Generated by scripts/generate-protobus-setup.mjs
import * as proto from "@shared/proto/index"
import { ProtoBusClient, Callbacks } from "./grpc-client-base"

export class AccountServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.AccountService"
    static async accountLoginClicked(request: proto.cline.EmptyRequest): Promise<proto.cline.String> {
		return this.makeRequest("accountLoginClicked", request)
	}
    static async accountLogoutClicked(request: proto.cline.EmptyRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("accountLogoutClicked", request)
	}
    static subscribeToAuthStatusUpdate(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.AuthState>): ()=>void {
		return this.makeStreamingRequest("subscribeToAuthStatusUpdate", request, callbacks)
	}
    static async authStateChanged(request: proto.cline.AuthStateChangedRequest): Promise<proto.cline.AuthState> {
		return this.makeRequest("authStateChanged", request)
	}
    static async getUserCredits(request: proto.cline.EmptyRequest): Promise<proto.cline.UserCreditsData> {
		return this.makeRequest("getUserCredits", request)
	}
    static async getOrganizationCredits(request: proto.cline.GetOrganizationCreditsRequest): Promise<proto.cline.OrganizationCreditsData> {
		return this.makeRequest("getOrganizationCredits", request)
	}
    static async getUserOrganizations(request: proto.cline.EmptyRequest): Promise<proto.cline.UserOrganizationsResponse> {
		return this.makeRequest("getUserOrganizations", request)
	}
    static async setUserOrganization(request: proto.cline.UserOrganizationUpdateRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("setUserOrganization", request)
	}
}
export class BrowserServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.BrowserService"
    static async getBrowserConnectionInfo(request: proto.cline.EmptyRequest): Promise<proto.cline.BrowserConnectionInfo> {
		return this.makeRequest("getBrowserConnectionInfo", request)
	}
    static async testBrowserConnection(request: proto.cline.StringRequest): Promise<proto.cline.BrowserConnection> {
		return this.makeRequest("testBrowserConnection", request)
	}
    static async discoverBrowser(request: proto.cline.EmptyRequest): Promise<proto.cline.BrowserConnection> {
		return this.makeRequest("discoverBrowser", request)
	}
    static async getDetectedChromePath(request: proto.cline.EmptyRequest): Promise<proto.cline.ChromePath> {
		return this.makeRequest("getDetectedChromePath", request)
	}
    static async updateBrowserSettings(request: proto.cline.UpdateBrowserSettingsRequest): Promise<proto.cline.Boolean> {
		return this.makeRequest("updateBrowserSettings", request)
	}
    static async relaunchChromeDebugMode(request: proto.cline.EmptyRequest): Promise<proto.cline.String> {
		return this.makeRequest("relaunchChromeDebugMode", request)
	}
}
export class CheckpointsServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.CheckpointsService"
    static async checkpointDiff(request: proto.cline.Int64Request): Promise<proto.cline.Empty> {
		return this.makeRequest("checkpointDiff", request)
	}
    static async checkpointRestore(request: proto.cline.CheckpointRestoreRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("checkpointRestore", request)
	}
}
export class FileServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.FileService"
    static async copyToClipboard(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("copyToClipboard", request)
	}
    static async openFile(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("openFile", request)
	}
    static async openImage(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("openImage", request)
	}
    static async openMention(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("openMention", request)
	}
    static async deleteRuleFile(request: proto.cline.RuleFileRequest): Promise<proto.cline.RuleFile> {
		return this.makeRequest("deleteRuleFile", request)
	}
    static async createRuleFile(request: proto.cline.RuleFileRequest): Promise<proto.cline.RuleFile> {
		return this.makeRequest("createRuleFile", request)
	}
    static async searchCommits(request: proto.cline.StringRequest): Promise<proto.cline.GitCommits> {
		return this.makeRequest("searchCommits", request)
	}
    static async selectFiles(request: proto.cline.BooleanRequest): Promise<proto.cline.StringArrays> {
		return this.makeRequest("selectFiles", request)
	}
    static async getRelativePaths(request: proto.cline.RelativePathsRequest): Promise<proto.cline.RelativePaths> {
		return this.makeRequest("getRelativePaths", request)
	}
    static async searchFiles(request: proto.cline.FileSearchRequest): Promise<proto.cline.FileSearchResults> {
		return this.makeRequest("searchFiles", request)
	}
    static async toggleClineRule(request: proto.cline.ToggleClineRuleRequest): Promise<proto.cline.ToggleClineRules> {
		return this.makeRequest("toggleClineRule", request)
	}
    static async toggleCursorRule(request: proto.cline.ToggleCursorRuleRequest): Promise<proto.cline.ClineRulesToggles> {
		return this.makeRequest("toggleCursorRule", request)
	}
    static async toggleWindsurfRule(request: proto.cline.ToggleWindsurfRuleRequest): Promise<proto.cline.ClineRulesToggles> {
		return this.makeRequest("toggleWindsurfRule", request)
	}
    static async refreshRules(request: proto.cline.EmptyRequest): Promise<proto.cline.RefreshedRules> {
		return this.makeRequest("refreshRules", request)
	}
    static async openTaskHistory(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("openTaskHistory", request)
	}
    static async toggleWorkflow(request: proto.cline.ToggleWorkflowRequest): Promise<proto.cline.ClineRulesToggles> {
		return this.makeRequest("toggleWorkflow", request)
	}
    static subscribeToWorkspaceUpdates(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.StringArray>): ()=>void {
		return this.makeStreamingRequest("subscribeToWorkspaceUpdates", request, callbacks)
	}
}
export class McpServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.McpService"
    static async toggleMcpServer(request: proto.cline.ToggleMcpServerRequest): Promise<proto.cline.McpServers> {
		return this.makeRequest("toggleMcpServer", request)
	}
    static async updateMcpTimeout(request: proto.cline.UpdateMcpTimeoutRequest): Promise<proto.cline.McpServers> {
		return this.makeRequest("updateMcpTimeout", request)
	}
    static async addRemoteMcpServer(request: proto.cline.AddRemoteMcpServerRequest): Promise<proto.cline.McpServers> {
		return this.makeRequest("addRemoteMcpServer", request)
	}
    static async downloadMcp(request: proto.cline.StringRequest): Promise<proto.cline.McpDownloadResponse> {
		return this.makeRequest("downloadMcp", request)
	}
    static async restartMcpServer(request: proto.cline.StringRequest): Promise<proto.cline.McpServers> {
		return this.makeRequest("restartMcpServer", request)
	}
    static async deleteMcpServer(request: proto.cline.StringRequest): Promise<proto.cline.McpServers> {
		return this.makeRequest("deleteMcpServer", request)
	}
    static async toggleToolAutoApprove(request: proto.cline.ToggleToolAutoApproveRequest): Promise<proto.cline.McpServers> {
		return this.makeRequest("toggleToolAutoApprove", request)
	}
    static async refreshMcpMarketplace(request: proto.cline.EmptyRequest): Promise<proto.cline.McpMarketplaceCatalog> {
		return this.makeRequest("refreshMcpMarketplace", request)
	}
    static async openMcpSettings(request: proto.cline.EmptyRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("openMcpSettings", request)
	}
    static subscribeToMcpMarketplaceCatalog(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.McpMarketplaceCatalog>): ()=>void {
		return this.makeStreamingRequest("subscribeToMcpMarketplaceCatalog", request, callbacks)
	}
    static async getLatestMcpServers(request: proto.cline.Empty): Promise<proto.cline.McpServers> {
		return this.makeRequest("getLatestMcpServers", request)
	}
    static subscribeToMcpServers(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.McpServers>): ()=>void {
		return this.makeStreamingRequest("subscribeToMcpServers", request, callbacks)
	}
}
export class ModelsServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.ModelsService"
    static async getOllamaModels(request: proto.cline.StringRequest): Promise<proto.cline.StringArray> {
		return this.makeRequest("getOllamaModels", request)
	}
    static async getLmStudioModels(request: proto.cline.StringRequest): Promise<proto.cline.StringArray> {
		return this.makeRequest("getLmStudioModels", request)
	}
    static async getVsCodeLmModels(request: proto.cline.EmptyRequest): Promise<proto.cline.VsCodeLmModelsArray> {
		return this.makeRequest("getVsCodeLmModels", request)
	}
    static async refreshOpenRouterModels(request: proto.cline.EmptyRequest): Promise<proto.cline.OpenRouterCompatibleModelInfo> {
		return this.makeRequest("refreshOpenRouterModels", request)
	}
    static async refreshHuggingFaceModels(request: proto.cline.EmptyRequest): Promise<proto.cline.OpenRouterCompatibleModelInfo> {
		return this.makeRequest("refreshHuggingFaceModels", request)
	}
    static async refreshOpenAiModels(request: proto.cline.OpenAiModelsRequest): Promise<proto.cline.StringArray> {
		return this.makeRequest("refreshOpenAiModels", request)
	}
    static async refreshRequestyModels(request: proto.cline.EmptyRequest): Promise<proto.cline.OpenRouterCompatibleModelInfo> {
		return this.makeRequest("refreshRequestyModels", request)
	}
    static subscribeToOpenRouterModels(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.OpenRouterCompatibleModelInfo>): ()=>void {
		return this.makeStreamingRequest("subscribeToOpenRouterModels", request, callbacks)
	}
    static async updateApiConfigurationProto(request: proto.cline.UpdateApiConfigurationRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("updateApiConfigurationProto", request)
	}
    static async validateApiConfigurationProto(request: proto.cline.UpdateApiConfigurationRequest): Promise<proto.cline.Boolean> {
		return this.makeRequest("validateApiConfigurationProto", request)
	}
    static async updateEmbeddingConfigurationProto(request: proto.cline.UpdateEmbeddingConfigurationRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("updateEmbeddingConfigurationProto", request)
	}
    static async validateEmbeddingConfigurationProto(request: proto.cline.UpdateEmbeddingConfigurationRequest): Promise<proto.cline.Boolean> {
		return this.makeRequest("validateEmbeddingConfigurationProto", request)
	}
    static async refreshGroqModels(request: proto.cline.EmptyRequest): Promise<proto.cline.OpenRouterCompatibleModelInfo> {
		return this.makeRequest("refreshGroqModels", request)
	}
}
export class SlashServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.SlashService"
    static async reportBug(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("reportBug", request)
	}
    static async condense(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("condense", request)
	}
}
export class StateServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.StateService"
    static async getLatestState(request: proto.cline.EmptyRequest): Promise<proto.cline.State> {
		return this.makeRequest("getLatestState", request)
	}
    static async updateTerminalConnectionTimeout(request: proto.cline.UpdateTerminalConnectionTimeoutRequest): Promise<proto.cline.UpdateTerminalConnectionTimeoutResponse> {
		return this.makeRequest("updateTerminalConnectionTimeout", request)
	}
    static async updateTerminalReuseEnabled(request: proto.cline.BooleanRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("updateTerminalReuseEnabled", request)
	}
    static async updateDefaultTerminalProfile(request: proto.cline.StringRequest): Promise<proto.cline.TerminalProfileUpdateResponse> {
		return this.makeRequest("updateDefaultTerminalProfile", request)
	}
    static async getAvailableTerminalProfiles(request: proto.cline.EmptyRequest): Promise<proto.cline.TerminalProfiles> {
		return this.makeRequest("getAvailableTerminalProfiles", request)
	}
    static subscribeToState(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.State>): ()=>void {
		return this.makeStreamingRequest("subscribeToState", request, callbacks)
	}
    static async toggleFavoriteModel(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("toggleFavoriteModel", request)
	}
    static async resetState(request: proto.cline.ResetStateRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("resetState", request)
	}
    static async togglePlanActModeProto(request: proto.cline.TogglePlanActModeRequest): Promise<proto.cline.Boolean> {
		return this.makeRequest("togglePlanActModeProto", request)
	}
    static async updateAutoApprovalSettings(request: proto.cline.AutoApprovalSettingsRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("updateAutoApprovalSettings", request)
	}
    static async updateSettings(request: proto.cline.UpdateSettingsRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("updateSettings", request)
	}
    static async updateTelemetrySetting(request: proto.cline.TelemetrySettingRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("updateTelemetrySetting", request)
	}
    static async setWelcomeViewCompleted(request: proto.cline.BooleanRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("setWelcomeViewCompleted", request)
	}
    static async manageIndex(request: proto.cline.ManageIndexRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("manageIndex", request)
	}
    static async manageExperts(request: proto.cline.ManageExpertsRequest): Promise<proto.cline.ManageExpertsResponse> {
		return this.makeRequest("manageExperts", request)
	}
}
export class TaskServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.TaskService"
    static async cancelTask(request: proto.cline.EmptyRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("cancelTask", request)
	}
    static async clearTask(request: proto.cline.EmptyRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("clearTask", request)
	}
    static async getTotalTasksSize(request: proto.cline.EmptyRequest): Promise<proto.cline.Int64> {
		return this.makeRequest("getTotalTasksSize", request)
	}
    static async deleteTasksWithIds(request: proto.cline.StringArrayRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("deleteTasksWithIds", request)
	}
    static async newTask(request: proto.cline.NewTaskRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("newTask", request)
	}
    static async showTaskWithId(request: proto.cline.StringRequest): Promise<proto.cline.TaskResponse> {
		return this.makeRequest("showTaskWithId", request)
	}
    static async exportTaskWithId(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("exportTaskWithId", request)
	}
    static async toggleTaskFavorite(request: proto.cline.TaskFavoriteRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("toggleTaskFavorite", request)
	}
    static async getTaskHistory(request: proto.cline.GetTaskHistoryRequest): Promise<proto.cline.TaskHistoryArray> {
		return this.makeRequest("getTaskHistory", request)
	}
    static async askResponse(request: proto.cline.AskResponseRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("askResponse", request)
	}
    static async taskFeedback(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("taskFeedback", request)
	}
    static async taskCompletionViewChanges(request: proto.cline.Int64Request): Promise<proto.cline.Empty> {
		return this.makeRequest("taskCompletionViewChanges", request)
	}
    static async executeQuickWin(request: proto.cline.ExecuteQuickWinRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("executeQuickWin", request)
	}
    static async deleteAllTaskHistory(request: proto.cline.EmptyRequest): Promise<proto.cline.DeleteAllTaskHistoryCount> {
		return this.makeRequest("deleteAllTaskHistory", request)
	}
}
export class UiServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.UiService"
    static async scrollToSettings(request: proto.cline.StringRequest): Promise<proto.cline.KeyValuePair> {
		return this.makeRequest("scrollToSettings", request)
	}
    static async onDidShowAnnouncement(request: proto.cline.EmptyRequest): Promise<proto.cline.Boolean> {
		return this.makeRequest("onDidShowAnnouncement", request)
	}
    static subscribeToAddToInput(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.String>): ()=>void {
		return this.makeStreamingRequest("subscribeToAddToInput", request, callbacks)
	}
    static subscribeToMcpButtonClicked(request: proto.cline.WebviewProviderTypeRequest, callbacks: Callbacks<proto.cline.Empty>): ()=>void {
		return this.makeStreamingRequest("subscribeToMcpButtonClicked", request, callbacks)
	}
    static subscribeToHistoryButtonClicked(request: proto.cline.WebviewProviderTypeRequest, callbacks: Callbacks<proto.cline.Empty>): ()=>void {
		return this.makeStreamingRequest("subscribeToHistoryButtonClicked", request, callbacks)
	}
    static subscribeToChatButtonClicked(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.Empty>): ()=>void {
		return this.makeStreamingRequest("subscribeToChatButtonClicked", request, callbacks)
	}
    static subscribeToAccountButtonClicked(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.Empty>): ()=>void {
		return this.makeStreamingRequest("subscribeToAccountButtonClicked", request, callbacks)
	}
    static subscribeToExpertsButtonClicked(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.Empty>): ()=>void {
		return this.makeStreamingRequest("subscribeToExpertsButtonClicked", request, callbacks)
	}
    static subscribeToSettingsButtonClicked(request: proto.cline.WebviewProviderTypeRequest, callbacks: Callbacks<proto.cline.Empty>): ()=>void {
		return this.makeStreamingRequest("subscribeToSettingsButtonClicked", request, callbacks)
	}
    static subscribeToPartialMessage(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.ClineMessage>): ()=>void {
		return this.makeStreamingRequest("subscribeToPartialMessage", request, callbacks)
	}
    static subscribeToTheme(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.String>): ()=>void {
		return this.makeStreamingRequest("subscribeToTheme", request, callbacks)
	}
    static async initializeWebview(request: proto.cline.EmptyRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("initializeWebview", request)
	}
    static subscribeToRelinquishControl(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.Empty>): ()=>void {
		return this.makeStreamingRequest("subscribeToRelinquishControl", request, callbacks)
	}
    static subscribeToFocusChatInput(request: proto.cline.StringRequest, callbacks: Callbacks<proto.cline.Empty>): ()=>void {
		return this.makeStreamingRequest("subscribeToFocusChatInput", request, callbacks)
	}
    static subscribeToDidBecomeVisible(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.Empty>): ()=>void {
		return this.makeStreamingRequest("subscribeToDidBecomeVisible", request, callbacks)
	}
    static async getWebviewHtml(request: proto.cline.EmptyRequest): Promise<proto.cline.String> {
		return this.makeRequest("getWebviewHtml", request)
	}
    static async openUrl(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("openUrl", request)
	}
    static async showToast(request: proto.cline.ShowToastRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("showToast", request)
	}
}
export class WebServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.WebService"
    static async checkIsImageUrl(request: proto.cline.StringRequest): Promise<proto.cline.IsImageUrl> {
		return this.makeRequest("checkIsImageUrl", request)
	}
    static async fetchOpenGraphData(request: proto.cline.StringRequest): Promise<proto.cline.OpenGraphData> {
		return this.makeRequest("fetchOpenGraphData", request)
	}
    static async openInBrowser(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return this.makeRequest("openInBrowser", request)
	}
}
